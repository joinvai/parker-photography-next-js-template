# Product Requirements Document: Font and Color System Update

# Overview
This document outlines the requirements for updating the font and color system across the web application. The primary goal is to refresh the visual identity by implementing a new set of fonts ('Beaufort W01 Light' for headers, 'Open Sans' weight 400 for body) and a standardized color palette (Black `#1a1b1f`, Egg Shell `#faf9f4`, Green `#1f2301`, Beige `#bfb3a9`, Chocolate `#1e0b02`). This update aims to enhance visual consistency and modernize the user interface while ensuring all existing application functionality remains unchanged. It solves the problem of an outdated or inconsistent visual style. This document is for the development team implementing these changes.

# Core Features

*   **Header Font Implementation:**
    *   **What:** Updates all heading elements (h1-h6) and semantically styled headers to use the `Beaufort W01 Light` font.
    *   **Why:** Creates a consistent and updated look for all primary headings.
    *   **How:** Define the font family in Tailwind configuration, referencing `public/fonts/Beaufort W01 Light.woff2`, and apply it via base styles or utility classes to header elements across specified files.

*   **Body Font Implementation:**
    *   **What:** Updates all primary body text elements (paragraphs, lists, etc.) to use the 'Open Sans' font at weight 400.
    *   **Why:** Ensures readable and visually consistent body text aligned with the new style.
    *   **How:** Configure and import 'Open Sans' (weight 400) using the Next.js Google Fonts optimization feature in `src/app/layout.tsx`. Apply this font as the base body font via Tailwind configuration or global CSS.

*   **Link Styling:**
    *   **What:** Apply an italic style to all hyperlink elements (`<a>`) globally **on hover**.
    *   **Why:** Provides a clear visual cue for link interactivity according to the new design guidelines.
    *   **How:** Implement a global CSS rule (e.g., in `globals.css`) that targets `a:hover` and applies `font-style: italic;`. The standard 'Beaufort W01 Light' font will be used, styled via CSS on hover.

*   **Color Palette Definition:**
    *   **What:** Define the new global color palette within the Tailwind CSS configuration.
    *   **Why:** Centralizes color definitions for easy and consistent application via utility classes.
    *   **How:** Add the specified hex codes (Black, Egg Shell, Green, Beige, Chocolate) to the `theme.colors` object in `tailwind.config.ts`.

*   **Color Palette Application:**
    *   **What:** Apply the new colors consistently across UI elements (text, backgrounds, borders, buttons, etc.) in all specified files.
    *   **Why:** Achieves a cohesive and modern visual identity based on the defined palette.
    *   **How:** Replace existing color classes/styles with the appropriate Tailwind utility classes derived from the newly defined palette. Specific usage:
        *   Global background: Egg Shell (`#faf9f4`)
        *   Body text: Black (`#1a1b1f`)
        *   Buttons: Green (`#1f2301`) (Verify background/text color combination for buttons).

*   **Configuration Updates:**
    *   **What:** Modify core configuration files (`globals.css`, `tailwind.config.ts`, `layout.tsx`).
    *   **Why:** Establishes the technical foundation for the new font and color system.
    *   **How:** Define base styles, font families, color palettes, and implement font loading strategies within these files.

# User Experience

*   **User Personas:** Primarily targets general site visitors and users interacting with the web application.
*   **Key User Flows:** Users navigating pages, reading content, interacting with links, buttons, forms, carousels, etc. The visual experience during these flows will be updated, but the functional flow remains identical.
*   **UI/UX Considerations:**
    *   **Visual Consistency:** Users should perceive a uniform application of fonts and colors across all specified pages and components. Headers will use 'Beaufort W01 Light', body text 'Open Sans', and links will become italic on hover.
    *   **Readability:** Text must remain highly legible with the new fonts and color combinations (especially Black text on Egg Shell background).
    *   **Functionality Preservation:** Users must experience no change in how interactive elements behave. Clicking links, submitting forms, using carousels, etc., must work exactly as before.
    *   **Performance:** Users should not notice any degradation in page load speed due to font loading.

# Technical Architecture

*   **System Components:** Primarily involves frontend components and styling configuration within a Next.js application using Tailwind CSS.
*   **Configuration Files:**
    *   `tailwind.config.ts`: Define font families (e.g., `sans`, `header`), colors, and potentially plugins.
    *   `src/app/globals.css`: Define base styles, global link hover styles, potentially CSS variables.
    *   `src/app/layout.tsx`: Implement Next.js Google Font loading for 'Open Sans 400', potentially preload local 'Beaufort' font.
*   **Font Files:**
    *   Local: `public/fonts/Beaufort W01 Light.woff2` (Ensure correct path and loading).
    *   Google Font: 'Open Sans' (Weight 400) loaded via `@next/font/google`.
*   **Styling Approach:** Primarily use Tailwind utility classes. Minimize custom CSS, keeping it global (in `globals.css`) where necessary (e.g., link hover).
*   **Affected Files:** Modification required across all files listed in the Appendix.
*   **Data Models:** No changes anticipated.
*   **APIs & Integrations:** No changes anticipated.
*   **Infrastructure:** No changes anticipated, beyond ensuring font files are served efficiently.

# Development Roadmap

*   **MVP Requirements (Single Phase):** The MVP consists of implementing all specified font and color changes across all listed files while preserving existing functionality.
    1.  **Foundation Setup:**
        *   Configure `tailwind.config.ts` with font families and the new color palette.
        *   Update `src/app/layout.tsx` to import and apply 'Open Sans 400' via Next.js Google Fonts. Ensure 'Beaufort W01 Light' is correctly referenced.
        *   Update `src/app/globals.css` with base styles and the global `a:hover { font-style: italic; }` rule. Define Egg Shell as the default body background. Define Black as the default text color.
    2.  **Component & Page Updates:**
        *   Systematically update all Page Components (`src/app/...`) listed in the Appendix, applying new font classes to headers/body and color classes as needed (using Green for buttons).
        *   Systematically update all Component Files (`src/components/...`) listed in the Appendix, ensuring consistent application of fonts and colors.
    3.  **Verification:**
        *   Thorough visual review of all updated pages and components across major browsers (Chrome, Firefox, Safari).
        *   Functional testing of all interactive elements within the updated files.
        *   Performance check (e.g., using Lighthouse or browser dev tools) to ensure no significant regression.
        *   Check accessibility, particularly color contrast where Green buttons are used.

*   **Future Enhancements:** None defined within the scope of this project.

# Logical Dependency Chain

1.  **Configuration (Base):** Update `tailwind.config.ts`, `globals.css`, and `layout.tsx`. This sets the foundation for fonts and colors. (Dependency: None)
2.  **Global Styles Verification:** Check a simple page (e.g., `src/app/page.tsx`) to ensure the base body font ('Open Sans'), background ('Egg Shell'), default text color ('Black'), and link hover effect are working globally. (Dependency: Step 1)
3.  **Header/Component Implementation:** Update shared components like `src/components/header.tsx` and `src/components/footer.tsx`. This allows seeing consistent elements across pages early. (Dependency: Step 1)
4.  **Page-by-Page Implementation:** Update the Page component files (`src/app/...`) one by one. (Dependency: Step 1, potentially Step 3 if using shared components)
5.  **Component Implementation (Specific):** Update the remaining Component files (`src/components/...`). Address components used within pages already updated. (Dependency: Step 1, potentially Step 4)
6.  **Comprehensive Testing:** Perform functional and visual testing across all updated areas once all files are modified. (Dependency: All previous steps)

*Goal is to establish global styles first, then apply them systematically, allowing for visual verification progressively.*

# Risks and Mitigations

*   **Technical Challenges:**
    *   *Risk:* Incorrect font loading (local or Google), leading to fallback fonts or performance issues.
    *   *Mitigation:* Use standard Next.js font optimization features correctly. Test font loading in browser dev tools. Ensure correct paths for local fonts.
    *   *Risk:* CSS specificity issues or conflicts between global styles, Tailwind utilities, and existing component styles.
    *   *Mitigation:* Prioritize Tailwind utility classes. Keep custom global CSS minimal and well-defined. Use browser dev tools to inspect and debug styles.
    *   *Risk:* Cross-browser visual inconsistencies.
    *   *Mitigation:* Test thoroughly on target browsers (Chrome, Firefox, Safari). Stick to standard CSS properties.
*   **Scope Definition:**
    *   *Risk:* Scope creep â€“ making layout changes or functional adjustments beyond fonts and colors.
    *   *Mitigation:* Strictly adhere to the list of files in the Appendix. Continuously reinforce the goal of *only* updating fonts/colors and preserving functionality. Review changes against this requirement.
*   **Resource Constraints:**
    *   *Risk:* Underestimating the time required to update and verify changes across the large number of specified files.
    *   *Mitigation:* Break down the file updates into smaller, manageable tasks (perhaps grouped by feature area or component type). Use a checklist based on the Appendix to track progress.

# Appendix

*   **Files to Update:**
    *   **Core Configuration:**
        *   `src/app/globals.css`
        *   `tailwind.config.ts`
        *   `src/app/layout.tsx`
    *   **Page Components:**
        *   `src/app/contact/page.tsx`
        *   `src/app/press/page.tsx`
        *   `src/app/projects/[slug]/page.tsx`
        *   `src/app/projects/page.tsx`
        *   `src/app/studio/page.tsx`
        *   `src/app/studio/team.ts` (*Note: Review if styling applies here*)
        *   `src/app/watch/page.tsx`
        *   `src/app/layout.tsx`
        *   `src/app/page.tsx`
    *   **Component Files (Image Related):**
        *   `src/components/image-grid/ImageGrid.tsx`
        *   `src/components/individual-project/individual-project-image.tsx`
        *   `src/components/project/project-detail-client.tsx`
        *   `src/components/project/project-image-with-lightbox.tsx`
        *   `src/components/project/project-lightbox.tsx`
    *   **Component Files (Studio Components):**
        *   `src/components/studio/about-section.tsx`
        *   `src/components/studio/studio-quote.tsx`
        *   `src/components/team/team-page-client.tsx`
        *   `src/components/watch/watch-page-client.tsx`
    *   **Component Files (General Components):**
        *   `src/components/about.tsx`
        *   `src/components/custom-carousel.tsx`
        *   `src/components/footer.tsx`
        *   `src/components/founder-quote.tsx`
        *   `src/components/full-page-carousel.tsx`
        *   `src/components/header.tsx`
        *   `src/components/icons.tsx` (*Note: Check if icon colors need updating*)
        *   `src/components/project-image.tsx`
        *   `src/components/project-inquiry-form.tsx`
        *   `src/components/projects-gallery.tsx`
        *   `src/components/subscribe-input.tsx`

*   **Global Color Palette:**
    *   Black: `#1a1b1f`
    *   Egg Shell: `#faf9f4`
    *   Green: `#1f2301`
    *   Beige: `#bfb3a9`
    *   Chocolate: `#1e0b02`

*   **External References:**
    *   Next.js Font Documentation: [https://nextjs.org/docs/app/building-your-application/optimizing/fonts](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) 