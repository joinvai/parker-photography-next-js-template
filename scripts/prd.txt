# Product Requirements Document: Project Inquiry Form

# Overview
This document outlines the requirements for implementing a project inquiry form on the website's contact page (`app/contact/page.tsx`). The goal is to provide a structured and user-friendly way for potential clients to submit details about their projects, replacing the entire existing form section below the "Get In Touch" header. This feature aims to capture leads effectively, standardize data collection, streamline the initial contact process, and centralize inquiry data in a designated Google Sheet (`Website Leads` tab, ID: `1uBawMgtpx7h0AEL1dlnHq221T5wDR5QirHQR7ZnxLeI`) using a Next.js server action, mirroring the existing email signup process.

# Core Features
-   **Inquiry Trigger:**
    -   Displays introductory text: "If you have a new project, please complete our new project form below."
    -   Provides a link-style button labeled "New Project Inquiry" using `src/components/ui/button.tsx`.
    -   Clicking the button opens a dialog (`src/components/ui/dialog.tsx`).
    -   Replaces the *entire* existing form section on `app/contact/page.tsx`.
-   **Inquiry Form Dialog:**
    -   Presents a form within the dialog.
    -   Contains fields for: First Name, Last Name, Contact Email, Phone Number, Project Address, Referral Source, Project Type, Project Description, Ongoing Project (Checkbox), Project Details, Project State (Radio Group), Budget (Select/Dropdown), Project Scope Details.
    -   Uses appropriate input components (`Input`, `Textarea`, `Checkbox`, `RadioGroup`, `Select` from `src/components/ui/`).
    -   Marks required fields clearly.
    -   Includes options for 'Project State' (Construction commenced, DA / Town Planning Approval, Pre DA / Town Planning and Approvals, Not yet started, initial inquiries and research) and 'Budget' (No budget as yet, seeking guidance, Less than $500K, $500K - $1.5M, $1.5 - 2.5M, $2.5M+, Other).
    -   Provides a submit button.
    -   Is dismissible via an 'X' button or clicking outside the dialog.
-   **Data Submission & Storage:**
    -   Uses a Next.js server action (adapted from `src/actions/add-email-to-sheet.ts`).
    -   Performs client-side and server-side validation using Zod.
    -   On successful validation, appends data to the specified Google Sheet (`Website Leads` tab, ID: `1uBawMgtpx7h0AEL1dlnHq221T5wDR5QirHQR7ZnxLeI`).
    -   Maps form fields to Google Sheet columns A-M using human-readable headers (e.g., "First Name").
    -   Uses Google Service Account credentials (`src/lib/siredesign-4227867bd281.json`).
-   **User Feedback:**
    -   Provides clear success messages upon successful submission (following common UX patterns).
    -   Displays clear, beige-colored error messages near relevant fields upon validation failure (client or server-side), consistent with `subscribe-input.tsx`.
    -   Shows an error message if the server action fails to write to the Google Sheet.
    -   Preserves form data on submission errors.

# User Experience
-   **User Personas:** Potential clients visiting the website seeking design or related services.
-   **Key User Flow:**
    1.  User navigates to the Contact page (`app/contact/page.tsx`).
    2.  User sees the introductory text and the "New Project Inquiry" button below the "Get In Touch" header.
    3.  User clicks the "New Project Inquiry" button.
    4.  A dialog containing the inquiry form opens.
    5.  User fills out the form fields, selecting options for 'Project State' and 'Budget'.
    6.  User clicks the submit button.
    7.  **(Success Path):** Form validates successfully. Data is sent via server action to Google Sheets. A success message appears in the dialog. The dialog may close automatically or offer a close button.
    8.  **(Validation Error Path):** Form fails validation. Beige error messages appear near invalid fields. Submission is blocked. User corrects errors and resubmits.
    9.  **(Server Error Path):** Form validates, but the server action fails (e.g., cannot write to sheet). An error message appears in the dialog. Form data remains. User may try again later.
    10. **(Dismissal Path):** User clicks the 'X' button or outside the dialog area at any point before successful submission. The dialog closes without submitting.
-   **UI/UX Considerations:**
    -   All components (button, dialog, form elements) must adhere to the site's existing visual style (Shadcn UI).
    -   The form must be responsive and usable on desktop, tablet, and mobile devices.
    -   WCAG AA accessibility standards must be met (keyboard navigation, screen reader compatibility, labeling).
    -   Interaction feedback (dialog opening, submission status) should be prompt and clear.
    -   Error messages must be user-friendly and informative, styled consistently in beige.

# Technical Architecture
-   **Frontend:**
    -   Framework: Next.js / React
    -   UI Components: Shadcn UI components (`Button`, `Dialog`, `Input`, `Textarea`, `Checkbox`, `RadioGroup`, `Select`) from `src/components/ui/`.
    -   Validation Library: Zod
    -   State Management: React `useState` / potentially `react-hook-form`.
    -   Primary File Modification: `app/contact/page.tsx`.
    -   New Component Recommendation: `src/components/project-inquiry-form.tsx`.
-   **Backend:**
    -   Technology: Next.js Server Actions
    -   Validation: Zod (server-side validation mirroring client-side).
    -   API Integration: Google Sheets API v4.
    -   Authentication: Google Service Account via JSON key (`src/lib/siredesign-4227867bd281.json`).
    -   Dependencies: `googleapis`, `zod`.
-   **Data Model:**
    -   Interface `ProjectForm` defines the structure.
    -   Google Sheet `1uBawMgtpx7h0AEL1dlnHq221T5wDR5QirHQR7ZnxLeI`, tab `Website Leads`, columns A-M with headers matching form labels.

# Development Roadmap
-   **MVP (Minimum Viable Product):**
    1.  Implement the introductory text and "New Project Inquiry" button on `app/contact/page.tsx`, replacing the old form section.
    2.  Create the basic dialog structure (`src/components/ui/dialog.tsx`).
    3.  Build the core form component (`src/components/project-inquiry-form.tsx`) with all specified fields using Shadcn UI components (`Input`, `Textarea`, `Checkbox`, `RadioGroup`, `Select`).
    4.  Implement client-side validation using Zod for required fields and email format. Display basic validation errors (beige text).
    5.  Create the Next.js server action.
    6.  Implement server-side Zod validation within the action.
    7.  Integrate Google Sheets API using `googleapis` and the service account key to append data to the specified sheet and tab.
    8.  Connect the form submission to the server action.
    9.  Implement basic success and server error feedback messages in the dialog.
    10. Ensure dialog dismissal works (X button, click outside).
    11. Basic responsiveness for desktop and mobile.
-   **Future Enhancements (Out of Scope for MVP):**
    -   More sophisticated validation rules (e.g., phone number format).
    -   Loading indicators during submission.
    -   Saving partially filled form state (e.g., to local storage).
    -   Email notifications on submission.
    -   Admin interface for viewing submissions.

# Logical Dependency Chain
1.  **UI Foundation:** Update `app/contact/page.tsx` to remove the old form and add the new text/button trigger.
2.  **Dialog Shell:** Implement the basic `Dialog` component structure that opens on button click.
3.  **Form Component:** Create the `ProjectInquiryForm` component with all input fields (Layout and basic state).
4.  **Client-Side Validation:** Integrate Zod for client-side validation and display error messages.
5.  **Server Action (Core Logic):** Create the Next.js server action, including server-side Zod validation.
6.  **Google Sheets Integration:** Implement the `googleapis` logic within the server action to write data to the sheet using the service account. Test this independently if possible.
7.  **End-to-End Connection:** Connect the form's onSubmit handler to the server action.
8.  **Feedback Implementation:** Add success and specific server error handling/messaging.
9.  **Styling & Refinement:** Ensure consistent styling, accessibility, and responsiveness.

# Risks and Mitigations
-   **Technical Challenge (Google Sheets API):** Potential issues with authentication, permissions, or API quotas.
    -   **Mitigation:** Thoroughly test the Google Sheets integration early using the provided credentials. Implement robust error handling and logging for API calls. Ensure service account has correct permissions for the target sheet.
-   **Validation Complexity:** Ensuring consistent validation logic between client and server using Zod. Handling edge cases in user input.
    -   **Mitigation:** Define a single Zod schema used by both client and server. Test validation logic thoroughly with various inputs (valid, invalid, edge cases). Use a form library like `react-hook-form` to simplify integration.
-   **UI Consistency:** Ensuring the new form elements match the existing site design perfectly.
    -   **Mitigation:** Strictly use components from `src/components/ui/`. Refer to existing forms/components (`subscribe-input.tsx`) for styling cues, especially error message styling. Test across browsers and devices.
-   **Scope Creep:** Adding features beyond the defined MVP during development.
    -   **Mitigation:** Strictly adhere to the requirements outlined in this PRD for the initial implementation. Log any new feature requests for consideration in future iterations (see Future Enhancements).

# Appendix
-   **Google Sheet ID:** `1uBawMgtpx7h0AEL1dlnHq221T5wDR5QirHQR7ZnxLeI`
-   **Google Sheet Tab Name:** `Website Leads`
-   **Service Account Key:** `src/lib/siredesign-4227867bd281.json`
-   **Referenced UI Components:**
    -   `src/components/ui/button.tsx`
    -   `src/components/ui/dialog.tsx`
    -   `src/components/ui/input.tsx`
    -   `src/components/ui/textarea.tsx`
    -   `src/components/ui/checkbox.tsx`
    -   `src/components/ui/radio-group.tsx`
    -   `src/components/ui/select.tsx`
-   **Reference Action:** `src/actions/add-email-to-sheet.ts`
-   **Reference Styling:** `src/components/subscribe-input.tsx` (for error message styling)
-   **Data Column Mapping:** Form fields map sequentially to columns A-M in the `Website Leads` tab, using human-readable headers matching form labels. 