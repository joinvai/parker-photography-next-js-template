# Product Requirements Document: Contact Page Careers Section

# Overview
This document outlines the requirements for adding a static "CAREERS" section to the Sire Design contact page (`src/app/contact/page.tsx`). Currently, there's no designated area for potential applicants to learn about job opportunities or how to submit their qualifications. This feature solves this by adding a dedicated section with a button that reveals studio hiring status and contact information via a sheet component. It's intended for potential design applicants visiting the website and adds value by centralizing career inquiries and managing expectations clearly, even when no roles are actively open. It leverages existing UI components for consistency.

# Core Features
*   **CAREERS Section Display:**
    *   *What it does:* Adds a new, visually distinct section titled "CAREERS" to the contact page (`src/app/contact/page.tsx`).
    *   *Why it's important:* Creates a dedicated, easily findable space for career-related information, enhancing user navigation.
    *   *How it works:* A new static heading/text element "CAREERS" is added to the page's component structure.

*   **Job Availability Button/Link:**
    *   *What it does:* Introduces a clickable button, styled as a link, labeled "View Job Availabilities" within the CAREERS section.
    *   *Why it's important:* Provides a clear call-to-action for users interested in career opportunities. Ensures visual consistency by matching existing link styles.
    *   *How it works:* Utilizes the `link` variant of the existing `src/components/ui/button.tsx` component, styled to match the "Project Inquiry Link".

*   **Information Sheet Display:**
    *   *What it does:* Opens an overlay sheet component (`src/components/ui/sheet.tsx`) when the "View Job Availabilities" button is clicked. This sheet displays static text about current openings and application instructions.
    *   *Why it's important:* Delivers the necessary career information contextually without navigating the user away from the contact page. Manages expectations regarding open roles.
    *   *How it works:* An `onClick` handler on the button triggers the Sheet component, populating it with predefined static text content (title: "Current Openings", body: explanation, call-to-action: email address). The email address is a `mailto:` link.

# User Experience
*   **User Personas:**
    *   *Potential Applicant:* A talented designer (or other relevant role) exploring the Sire Design website, interested in potential career opportunities. They are looking for clear information on whether the studio is hiring and how to submit their resume/portfolio.

*   **Key User Flows:**
    1.  User navigates to the contact page (`src/app/contact/page.tsx`).
    2.  User scrolls or visually scans the page and identifies the "CAREERS" section.
    3.  User clicks the "View Job Availabilities" button/link within the CAREERS section.
    4.  A sheet component slides into view.
    5.  User reads the "Current Openings" title, the message about availability, and the instructions to email their resume/portfolio.
    6.  User optionally clicks the `mailto:` link to open their email client.
    7.  User closes the sheet (e.g., clicking an 'X' button or outside the sheet).

*   **UI/UX Considerations:**
    *   The CAREERS section should integrate seamlessly with the existing page layout and design.
    *   The "View Job Availabilities" button must visually match the "Project Inquiry Link" style exactly (font, color, hover states).
    *   The sheet opening/closing animation should be smooth and non-disruptive.
    *   All elements must be fully responsive and usable across desktop, tablet, and mobile viewports.
    *   Standard accessibility practices should be followed (e.g., keyboard navigation, ARIA attributes if needed beyond component defaults).

# Technical Architecture
*   **System Components:**
    *   `src/app/contact/page.tsx`: The primary Next.js page component where the new section, button, and sheet trigger logic will be added.
    *   `src/components/ui/button.tsx`: Existing shadcn/ui component used for the "View Job Availabilities" clickable element (link variant).
    *   `src/components/ui/sheet.tsx`: Existing shadcn/ui component used to display the career information upon button click.

*   **Data Models:**
    *   N/A. All content ("CAREERS" heading, sheet title, body text, email address) is static and hardcoded within the frontend component.

*   **APIs and Integrations:**
    *   N/A. This feature does not require any external or internal API calls or integrations.

*   **Infrastructure Requirements:**
    *   N/A. No changes to the existing hosting or infrastructure are required.

# Development Roadmap
*   **MVP Requirements:**
    1.  Add the static "CAREERS" heading/section structure to `src/app/contact/page.tsx`.
    2.  Implement the "View Job Availabilities" button using the `link` variant from `src/components/ui/button.tsx`.
    3.  Integrate the `src/components/ui/sheet.tsx` component.
    4.  Configure the button's `onClick` event to trigger the opening of the sheet.
    5.  Populate the sheet with the specified static text content ("Current Openings", body, call-to-action with `mailto:` link).
    6.  Ensure the sheet has a standard close mechanism.
    7.  Style the "View Job Availabilities" button to precisely match the "Project Inquiry Link" styling.
    8.  Verify responsiveness across major breakpoints (desktop, tablet, mobile).

*   **Future Enhancements:**
    *   Integrate with an Applicant Tracking System (ATS).
    *   Dynamically fetch job openings from a CMS or API.
    *   Develop a dedicated, more detailed Careers page.
    *   Add an inline form for direct application submission.
    *   Allow administrators to update the sheet content via a CMS.

# Logical Dependency Chain
1.  **Foundation (HTML Structure):** Add the basic div structure and the "CAREERS" heading text within `src/app/contact/page.tsx`. (Allows visual placement confirmation).
2.  **Interaction Element:** Add the `Button` component (`link` variant) with the text "View Job Availabilities" below the heading. (Creates the trigger).
3.  **Sheet Integration:** Add the `Sheet` component structure and the static text content ("Current Openings", body, email CTA) within the `SheetContent`. (Makes the target content available).
4.  **Trigger Logic:** Implement the state management (`useState`) and `onClick` handler on the button to control the sheet's open/closed state. (Connects button to sheet visibility).
5.  **Styling:** Apply the necessary styling (likely via class names) to the "View Job Availabilities" button to match the "Project Inquiry Link". (Ensures visual consistency).
6.  **Refinement & Responsiveness:** Test the flow, adjust spacing/layout as needed, and verify correct appearance and functionality across different screen sizes. Add `mailto:` link functionality. Test closing mechanisms.

# Risks and Mitigations
*   **Technical Challenges:**
    *   *Risk:* Minor styling conflicts between the new button/section and existing page styles, or unexpected behavior from the shadcn/ui Sheet component.
    *   *Mitigation:* Thoroughly test styling across browsers and viewports. Consult shadcn/ui documentation for sheet implementation details and potential edge cases. Use browser developer tools to debug CSS conflicts.
*   **Figuring out the MVP:**
    *   *Risk:* Scope creep â€“ adding features beyond the defined static text display (e.g., attempting dynamic content loading).
    *   *Mitigation:* Strictly adhere to the MVP requirements defined in the "Development Roadmap". Defer all other ideas to "Future Enhancements".
*   **Resource Constraints:**
    *   *Risk:* Development time underestimated.
    *   *Mitigation:* The scope is small and uses existing components, minimizing this risk. Break down implementation according to the "Logical Dependency Chain" for clear progress tracking.

# Appendix
*   **Open Issues / Questions:**
    *   Confirm the exact vertical placement/ordering of the "CAREERS" section relative to other sections (e.g., Project Inquiries) on the contact page.
    *   Verify if specific ARIA attributes are needed for the button or sheet beyond the defaults provided by shadcn/ui components to ensure accessibility compliance.
*   **Research Findings:** N/A
*   **Technical Specifications:** Refer to shadcn/ui documentation for `Button` and `Sheet` component props and usage: [https://ui.shadcn.com/docs/components/button](https://ui.shadcn.com/docs/components/button), [https://ui.shadcn.com/docs/components/sheet](https://ui.shadcn.com/docs/components/sheet)