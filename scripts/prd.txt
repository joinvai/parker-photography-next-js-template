# PRD: Full-Width Project Image Grid

# Overview
This document outlines requirements for enhancing the individual project page photo gallery on the Sire Design website. Currently, the gallery uses a standard grid constrained within the main content area. This project aims to solve the limitation of smaller image presentation by transforming the gallery (excluding the hero image) into a full-width, immersive experience. It's for site visitors interested in viewing project details, providing value through larger, more engaging visuals that better showcase the design work.

# Core Features
**Full-Width Alternating Image Grid**
*   **What it does:** Displays project photos (after the initial hero image) in a grid that spans the full viewport width with consistent padding. The grid follows an alternating pattern: a row with two images side-by-side, followed by a row with a single image spanning the width, repeating for all available photos.
*   **Why it's important:** Maximizes visual impact, makes project photography the central focus, creates a more modern and engaging user experience, and utilizes screen real estate more effectively, especially on larger displays.
*   **How it works:** Leverages Tailwind CSS grid utilities. The main container will have horizontal padding (32px). Logic within the page component (`src/app/projects/[slug]/page.tsx`) will iterate through the project's photos (index 1 onwards) and apply appropriate Tailwind classes to position images in either a two-column or single-column full-width row based on their index, maintaining defined aspect ratios (`aspect-[4/3]` for two-column items, `aspect-[21/9]` for single-column items) and gutters (32px).

# User Experience
*   **User Personas:** Primarily targets potential clients, design enthusiasts, and returning visitors interested in Sire Design's portfolio. These users value high-quality visuals and an aesthetically pleasing browsing experience.
*   **Key User Flow:**
    1.  User navigates to an individual project page (e.g., `/projects/[slug]`).
    2.  User views the initial project details and hero image.
    3.  User scrolls down to the photo gallery section.
    4.  User observes images presented in the full-width, alternating grid layout.
    5.  User scrolls through the gallery, viewing all images.
    6.  User clicks on an image to potentially open the existing lightbox view (interaction behavior remains unchanged).
*   **UI/UX Considerations:**
    *   **Visual Hierarchy:** The large, full-width images will dominate the visual hierarchy in this section, emphasizing the photography.
    *   **Padding & Spacing:** Consistent 32px padding on the left/right of the grid container and 32px gutters between images (rows and columns) are crucial for a clean, balanced look.
    *   **Responsiveness:** The grid must adapt seamlessly to various screen sizes. On smaller screens (e.g., below `md` breakpoint), images should stack vertically while maintaining full-width presentation (with padding). Aspect ratios must be preserved.
    *   **Load Performance:** Image loading should remain optimized using `next/image` properties (`priority`, `lazy`, `sizes`) to ensure a smooth experience without layout shifts or long waits. The existing `IndividualProjectImage` component handles this.

# Technical Architecture
*   **System Components:**
    *   `src/app/projects/[slug]/page.tsx`: Next.js page component. Requires modification to implement the new grid container and mapping logic.
    *   `src/components/individual-project/individual-project-image.tsx`: Reusable Next.js component for displaying individual images. Expected to be used as-is, receiving appropriate props (`src`, `alt`, `aspectRatio`, `priority`, `sizes`, potentially `isFullWidthGridItem` or similar).
    *   `src/lib/projects.ts`: Contains data fetching logic (`getProjectById`, `getAllProjects`) - Used as-is.
*   **Data Models:** Relies on the existing `Project` type, specifically the `photos: string[]` array.
*   **APIs and Integrations:** None. All data is sourced internally.
*   **Infrastructure Requirements:** Runs on the existing Next.js/Vercel infrastructure.
*   **Styling:** Implemented entirely using Tailwind CSS utility classes. No custom CSS files should be needed. Responsive design handled via Tailwind breakpoints (`sm:`, `md:`, etc.).

# Development Roadmap
*   **MVP Requirements:**
    1.  Modify the gallery section container in `page.tsx` to span full viewport width.
    2.  Apply 32px horizontal padding (`px-8`) to the container.
    3.  Implement the mapping logic over `project.photos.slice(1)` to generate the alternating grid structure (2-col row, 1-col row).
    4.  Apply 32px vertical and horizontal gutters (`gap-8`) between grid items.
    5.  Pass correct props (`aspectRatio`, Tailwind classes for grid placement) to the `IndividualProjectImage` component based on the image's position in the alternating layout.
    6.  Implement responsive behavior: ensure layout works on desktop and stacks vertically (maintaining full-width + padding) on smaller screens (e.g., below `md` breakpoint).
    7.  Ensure the layout correctly handles varying numbers of photos (edge cases: 1, 2, 3 additional photos, and lists ending mid-pattern).
*   **Future Enhancements:**
    *   (Out of scope for now) Explore different grid layout options or animations.

# Logical Dependency Chain
1.  **Foundation:** Existing project structure, `page.tsx`, `IndividualProjectImage` component, and data fetching (`getProjectById`) must be functional.
2.  **Container Setup:** Implement the full-width container with correct padding in `page.tsx`. This provides the canvas for the grid.
3.  **Grid Logic Implementation:** Develop the core logic within the `.map()` function in `page.tsx` to calculate the row type (2-col or 1-col) and apply appropriate Tailwind grid classes (`col-span-1`, `col-span-2` relative to a 2-column grid definition for the container) based on the image index.
4.  **Component Integration:** Pass the determined `aspectRatio` and any necessary classes/flags to `IndividualProjectImage`.
5.  **Responsiveness:** Apply Tailwind breakpoint modifiers to ensure the grid collapses correctly to a single column layout on smaller viewports.
6.  **Testing:** Test thoroughly across breakpoints and with projects having different numbers of photos (1, 2, 3, many).

*Goal Order:* Establish the basic full-width container -> Implement the alternating grid structure for desktop -> Ensure responsiveness -> Test edge cases.

# Risks and Mitigations
*   **Technical Challenge:** Implementing the alternating row logic cleanly within the map function.
    *   **Mitigation:** Plan the modulo arithmetic or index tracking carefully. Test iterations thoroughly. Consider a small helper function if logic becomes complex.
*   **Technical Challenge:** Ensuring seamless responsive transitions and correct stacking.
    *   **Mitigation:** Define a clear breakpoint (`md` recommended) for the transition. Test extensively using browser developer tools and real devices if possible. Ensure `next/image` `sizes` prop is correctly updated if needed.
*   **Visual Inconsistency:** Potential for slight misalignments or unexpected spacing issues across browsers/devices.
    *   **Mitigation:** Rely strictly on Tailwind utilities, which are generally cross-browser consistent. Test on major browsers (Chrome, Firefox, Safari).
*   **Scope Creep:** Desire to add more complex animations or grid variations.
    *   **Mitigation:** Adhere strictly to the MVP requirements defined in this document. Defer any additional features.

# Appendix
*   **Files Involved:**
    *   `src/app/projects/[slug]/page.tsx` (Primary modification)
    *   `src/components/individual-project/individual-project-image.tsx` (Usage, likely no modification)
*   **Explicitly Out of Scope:**
    *   Changes to hero image section.
    *   Changes to project text content or navigation links.
    *   Lightbox functionality changes.
    *   Image captions or credits.
    *   Alternative grid layouts.
*   **User Stories & Acceptance Criteria (Reference)**
    *   **US-001:** As a site visitor browsing a project page, I want the photo gallery images to extend across the full width of my screen so that I can see larger, more detailed photos.
        *   **AC-001:** Container spans full viewport width; 32px left/right padding applied; images utilize available space per layout rules minus gutters.
    *   **US-002:** As a site visitor, I want the images in the gallery (after the hero image) to be arranged in an alternating pattern of a two-column row followed by a single full-width row, so the layout is dynamic and visually interesting.
        *   **AC-002:** Row 1 = 2 images; Row 2 = 1 image; Row 3 = 2 images; Row 4 = 1 image, etc., pattern continues.
    *   **US-003:** As a site visitor, I want consistent spacing (gutters) between images and around the entire grid, so the layout looks clean, organized, and professional.
        *   **AC-003:** 32px horizontal gap between images in 2-col rows; 32px vertical gap between all rows; 32px left/right padding on main container.
    *   **US-004:** As a site visitor, I expect the full-width grid layout to adapt correctly to different screen sizes (mobile, tablet, desktop), so I have a good viewing experience regardless of my device.
        *   **AC-004:** Layout functions across Tailwind breakpoints; stacks gracefully below `md` (TBD) breakpoint; aspect ratios maintained.
    *   **US-005:** As a developer implementing this feature, I need the grid logic to correctly handle projects with varying numbers of photos (from one additional photo up to approximately 40), applying the alternating pattern as far as possible.
        *   **AC-005:** Renders correctly for 1, 2, 3 additional photos; handles lists ending mid-pattern gracefully (e.g., single image in a 2-col row slot).
